{"componentChunkName":"component---src-templates-blog-post-js","path":"/elm-side-projects/","webpackCompilationHash":"e2e9c998ca9cbdf422ef","result":{"data":{"site":{"siteMetadata":{"title":"TorchShip logs","author":"Dwight Doane"}},"markdownRemark":{"id":"7fc77175-44bd-50cf-a1e6-50764b459cf5","excerpt":"Elm makes side projects fun again First a little backstory. I was hired as a frontend developer for Omicron Media because I had experience with some functional…","html":"<h1>Elm makes side projects fun again</h1>\n<p>First a little backstory. I was hired as a frontend developer for <a href=\"https://omicronmedia.com\">Omicron Media</a> because I had experience with some functional JavaScript. <a href=\"https://halogen.tv\">Our product</a> is built with Elm. I had almost zero experience with Elm prior to getting hired on. So to gain experience as quickly as possible I decided to start a side project I’ve had in mind for some time. That project was <a href=\"https://tryvertol.com\">Vertol</a></p>\n<p>Elm is perfect for your side projects even if you can’t use it at work yet (I’m so sorry if you can’t).</p>\n<p>Its main benefits are that it is easy to read (once you get use to it), the community is fantastic, and the compiler (omg the compiler is so great).</p>\n<p>The Elm community is half of what makes it such a great language to work with. The Elm Slack is a really great place to get help or discuss code. Most everyone there is super friendly and helpful.</p>\n<p>To get used to putting an Elm application together, one has to look no further than the <a href=\"https://github.com/rtfeldman/elm-spa-example\">Elm SPA example</a> by Richard Feldman. Prior to 0.19, I took a ton of inspiration from that codebase for Vertol. It’s really helpful to see how it’s structured, and how certain techniques and idioms are applied to an app. I remember working with React and wondering: Do I use redux or not? If I do use Redux, do I use sagas or thunks or observables? Where does this Component’s state live? Not to mention the speed at which React’s ecosystem (and JavaScript’s as a whole) evolves, it’s hard to keep up.</p>\n<p>Elm’s idioms are much more present. You have the Elm Architecture to guide you. Most problems I’ve ran into have had examples in Richard’s Elm SPA and the community. Or there are useful functions that exist in <code class=\"language-text\">elm-community</code> extra modules for common patterns. Also Elm’s documentation is definitely better (imho) than other languages/frameworks.</p>\n<p>Elm’s higher profile members seem much more approachable. Whether through Slack or meeting them in person at Elm Conf. All of which makes the language much more friendly and approachable in my opinion. All of the Elm - conf talks are incredibly valuable.</p>\n<p>While you’re coding out features in Elm, the compiler is there every step of the way. I’ve never had the level of confidence in a feature as I do now with Elm. Let’s be real, we’re probably not writing tests for our little side projects. But if it compiles, it generally works as intended. If it doesn’t it tells you what to do to fix it. So if you’re halfway through a feature, and <em>life</em> happens and you put the project down, you can revisit it again in 3 months and pick up right where you left off. If it compiles you know you still have a working app. If it doesn’t compile, you know where to start to get it compiling again. I’ve done this numerous times on Vertol. Within minutes it was compiling again. There’s even been times I’ve coded out a whole feature, <em>WITHOUT</em> looking at it in the browser. Just hitting save and watching it compile (or not). Then when I thought it was ready, I opened Chrome and sure enough, it worked.</p>\n<p>It’s been my experience that side projects easily make their way into a limbo/sideproject-wasteland of half baked features. Mainly due to the friction involved in maintaining and refactoring as you learn and grow. Elm’s compiler makes refactoring not only more confident but way more fun! I’ve written and rewritten Vertol at least twice (maybe 4 times if you include the chrome extension). Refactoring and trying things out is much more straight forward and less stressful than previous workflows.</p>\n<p>You can get stated with Elm using the <a href=\"https://guide.elm-lang.org/install/\">elm-cli</a> or play with <a href=\"https://www.elm-live.com/\">elm-live</a>. Or if you just want to play around and not install anything check out <a href=\"https://ellie-app.com/\">Ellie</a>.</p>\n<p>When the time comes and you decide to make your toy app “production ready”, it doesn’t take much more work. <code class=\"language-text\">elm make —optimize</code> will give you a an <a href=\"https://elm-lang.org/news/small-assets-without-the-headache\">optimized bundle</a> ready to ship. You can carry all your confidence into production.</p>\n<p>Side projects are a great way to learn new languages and techniques. I believe everyone should learn Elm. Side projects are the perfect proving ground. Hopefully more people can use it at their day jobs.</p>\n<br/>\n<br/>\nSome helpful resources I used to learn Elm along the way:\n<ul>\n<li><a href=\"https://frontendmasters.com/courses/intro-elm/\">Richard Feldman’s Elm Intro on Frontend Masters</a></li>\n<li><a href=\"https://www.manning.com/books/elm-in-action\">Richard’s book - Elm in Action</a></li>\n<li><a href=\"https://pragprog.com/book/jfelm/programming-elm\">Jeremy Fairbank’s book - Programming Elm</a></li>\n<li><a href=\"https://guide.elm-lang.org/\">Offical guide</a></li>\n<li><a href=\"https://elm-lang.org/community\">Elm Slack and misc</a></li>\n</ul>\n<!-- CROSS POST TO DEV.TO -->","frontmatter":{"title":"Using Elm for sideprojects","date":"October 02, 2019","description":"Using Elm in your sideprojects"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/elm-side-projects/","previous":{"fields":{"slug":"/elm-chrome-ext/"},"frontmatter":{"title":"How I built a Chrome extension with Elm"}},"next":null}}}